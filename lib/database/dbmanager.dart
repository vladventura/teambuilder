// Dependencies for the database, async and await properties and also the path parsing
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';
import 'dart:async';

// Models in the database
import 'package:teambuilder/models/project.dart';

class DBManager{
  static Database db_instance;
  
  //Property
  Future <Database> get db async{
    if (db_instance == null) db_instance = await initDB();
    return db_instance;
  }

  //Initializes the database link from dart to the database file
  initDB() async{
    String databasesDirectory = await getDatabasesPath();
    String path = join(databasesDirectory, 'projects.db');
    var db = await openDatabase(path, onCreate: onCreateFunction, version: 1);
    return db;
  }

  //What to do when the link is created and the database is completely new
  void onCreateFunction(Database db, int version) async{
    await db.execute(
      """
      CREATE TABLE projects(id INTEGER PRIMARY KEY AUTOINCREMENT,
      name TEXT, description TEXT, complexity TEXT, contactPlatforms TEXT);
      """
    );
  }

  //Now to tell the queries of the database, and the mutations we can perform
  Future <List<Project>> getAllProjects() async{
    var dbLink = await db;
    List <Map> allItems = await dbLink.rawQuery("""SELECT * FROM projects""");
    List <Project> projects = new List();

    for (int index = 0; index < allItems.length; index++){
      Project pj = new Project();
      pj.contactPlatforms = allItems[index]['contactPlatforms'];
      pj.complexity = allItems[index]['complexity'];
      pj.description = allItems[index]['description'];
      pj.name = allItems[index]['name'];
      pj.id = allItems[index]['id'];
      projects.add(pj);
    }
    return projects;
  }

  //Inserts a project into the database
  insertProject(Project pj) async{
    var dbLink = await db;
    dbLink.insert('projects', pj.toMap());
  }

  //Updates to a given value an existing project. When the app scales, this should only be available to the project owner
  updateProject(Project pj) async{
    var dbLink = await db;
    dbLink.update('projects', pj.toMap(), conflictAlgorithm: ConflictAlgorithm.replace, where: """id=${pj.id}""");
  }

  //Deletes a given project from the database. Again, only available to the project's owner
  deleteProject(Project pj) async{
    var dbLink = await db;
    dbLink.delete('projects', where:"""id=${pj.id}""");
  }

  /*A glimpse to the future can be
  Future <List<Project>> userProjects(User user) async{
    And inside there can be something similar to
    SELECT * FROM projects WHERE userId=${user.id}
    and the userId parameter will be autogenerated by Google Auth service,
    Google Accounts
  }
  */
}

